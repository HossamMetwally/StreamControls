@page "/WeatherAPI"
<h3>WeatherAPI</h3>
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http
@using Syncfusion.Blazor.Layouts
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager


<Syncfusion.Blazor.Buttons.SfButton CssClass="e-primary" OnClick="@AddPanel">Add Weather Panel</Syncfusion.Blazor.Buttons.SfButton>
<SfDashboardLayout AllowResizing="true" @ref="dashboardObject" CellSpacing="@CellSpacing" Columns="@Columns">
    <DashboardLayoutPanels></DashboardLayoutPanels>
</SfDashboardLayout>

@code {
    // Tracking the panels to modify
    private List<PanelModel> panels = new List<PanelModel>();

    SfDashboardLayout dashboardObject; // Reference to the Syncfusion DashboardLayout component
    public double[] CellSpacing = { 10, 10 }; // Define the spacing between cells
    public int Columns = 3; // Define the number of columns in the layout
    private int count = 0; // Counter for generating unique panel IDs

    // private async Task AddPanel()
    // {
    //     var weatherData = await FetchWeatherData(); // Fetch weather data asynchronously
    //     if (weatherData != null)
    //     {
    //         count++; // Increment the panel count

    //         var currentTime = DateTime.Now.ToString("HH:mm:ss");

    //         string headerText = $"Weather in {weatherData.Name}";
    //         var panel = new PanelModel
    //                 {
    //                     Id = $"panel{count}", // Generate a unique panel ID
    //                     SizeX = 2, // Set the width of the panel in columns
    //                     SizeY = 2, // Set the height of the panel in rows
    //                     Header = @<div>@headerText</div>, // Define the panel header
    //                                                       // Define the panel content
    //             Content = @<div class="p-3">

    //     <h4 class="mb-3">Weather in @weatherData.Name</h4>
    //     <h3><strong>TIME:</strong> @currentTime</h3>
    //     <p><strong>Temperature:</strong> @weatherData.Main.Temp &deg;C</p>
    //     <p><strong>Feels Like:</strong> @weatherData.Main.FeelsLike &deg;C</p>
    //     <p><strong>Humidity:</strong> @weatherData.Main.Humidity %</p>
    //     <p><strong>Wind Speed:</strong> @weatherData.Wind.Speed m/s</p>
    //     <p><strong>Cloudiness:</strong> @weatherData.Clouds.All %</p>
    //     <p><strong>Sunrise:</strong> @GetTime(weatherData.Sys.Sunrise)</p>
    //     <p><strong>Sunset:</strong> @GetTime(weatherData.Sys.Sunset)</p>
    // </div>
    //         };
    //          <button @onclick="() => RemovePanel(panel)">X</button>
    //         await dashboardObject.AddPanelAsync(panel); // Add the panel to the dashboard

    //                                                     // <button class="btn btn-secondary">test</button>
    //         panels.Add(panel); // Add the panel to the list of panels


    //     }
    // }

    private PanelModel CreateWeatherPanel(WeatherResponse weatherData, string panelId)
    {
        var currentTime = DateTime.Now.ToString("HH:mm:ss");
        string headerText = $"Weather in {weatherData.Name}";

        var panel = new PanelModel
                {
                    Id = panelId,
                    SizeX = 2,
                    SizeY = 2,
                    Header = @<div>
        @headerText
        <button style="background-color: red; color: white; border: none; cursor: pointer; font-size: 16px;  border-radius: 50%; position: absolute; right: 10px; top: 5px;" @onclick="() => RemovePanel(panelId)">X</button>
        @*<button style="background-color: green; color: white; border: none; cursor: pointer; font-size: 16px;  border-radius: 50%; position: absolute; right: 10px; top: 5px;" @onclick="() => EditPanel(panelId)">X</button> *@

    </div>,
            Content = @<div class="p-3">
        <TimeDisplay></TimeDisplay>
        <h1 id="timeUpdate">Time : @currentTime</h1>
        <h4 class="mb-3">Weather in @weatherData.Name</h4>
        <p><strong>Temperature:</strong> @weatherData.Main.Temp &deg;C</p>
        <p><strong>Feels Like:</strong> @weatherData.Main.FeelsLike &deg;C</p>
        <p><strong>Humidity:</strong> @weatherData.Main.Humidity %</p>
        <p><strong>Wind Speed:</strong> @weatherData.Wind.Speed m/s</p>
        <p><strong>Cloudiness:</strong> @weatherData.Clouds.All %</p>
        <p><strong>Sunrise:</strong> @GetTime(weatherData.Sys.Sunrise)</p>
        <p><strong>Sunset:</strong> @GetTime(weatherData.Sys.Sunset)</p>
        // Your existing content here
        </div>
    };

        return panel;
    }

    private async Task AddPanel()
    {
        var weatherData = await FetchWeatherData();
        if (weatherData != null)
        {
            count++;
            string panelId = $"panel{count}";
            var panel = CreateWeatherPanel(weatherData, panelId);

            await dashboardObject.AddPanelAsync(panel);
            panels.Add(panel);

            await SaveLayoutState(); // Save state after adding a panel
        }
    }

    private async Task RemovePanel(string panelId)
    {
        await dashboardObject.RemovePanelAsync(panelId);
        panels.RemoveAll(p => p.Id == panelId);
        await SaveLayoutState(); // Save state after removing a panel
    }

    // private async Task EditPanel(string panelId)
    // {
    //     var panel = dashboardObject.
    // }

    private string GetTime(int unixTimeStamp)
    {
        // Convert Unix timestamp to a human-readable time format
        System.DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
        dtDateTime = dtDateTime.AddSeconds(unixTimeStamp).ToLocalTime();
        return dtDateTime.ToString("HH:mm:ss"); // Return the formatted time string
    }

   

    private string SerializeDashboardState()
    {
        var panelDataList = panels.Select(panel => new PanelState
            {
                Id = panel.Id,
                SizeX = panel.SizeX,
                SizeY = panel.SizeY,
                /* CityName =  Extract city name from panel's content */
            }).ToList();

        return System.Text.Json.JsonSerializer.Serialize(panelDataList);
    }



    private async Task SaveLayoutState()
    {
        var layoutState = SerializeDashboardState();
        await localStorage.SetItemAsync("dashboardLayoutState", layoutState);
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await localStorage.ContainKeyAsync("dashboardLayoutState"))
            {
                var layoutState = await localStorage.GetItemAsync<string>("dashboardLayoutState");
                var panelStates = System.Text.Json.JsonSerializer.Deserialize<List<PanelState>>(layoutState);

                foreach (var panelState in panelStates)
                {
                    var weatherData = await FetchWeatherData();
                    var panel = CreateWeatherPanel(weatherData, panelState.Id);
                    panel.SizeX = panelState.SizeX;
                    panel.SizeY = panelState.SizeY;
                    await dashboardObject.AddPanelAsync(panel);
                    panels.Add(panel);
                }
            }
        }
    }


    private async Task<WeatherResponse> FetchWeatherData()
    {
        var apiKey = "2b29d4c98b202b57e2a6b579778f8ab7";
        return await Http.GetFromJsonAsync<WeatherResponse>($"https://api.openweathermap.org/data/2.5/weather?q=London&appid={apiKey}&units=metric");
    }

    public class WeatherResponse // Define a class to represent the weather data
    {
        public Coord Coord { get; set; }
        public List<Weather> Weather { get; set; }
        public Main Main { get; set; }
        public int Visibility { get; set; }
        public Wind Wind { get; set; }
        public Clouds Clouds { get; set; }
        public int Dt { get; set; }
        public Sys Sys { get; set; }
        public int Timezone { get; set; }
        public int Id { get; set; }
        public string Name { get; set; }
        public int Cod { get; set; }
    }

    public class Coord // Define a class to represent the coordinates
    {
        public double Lon { get; set; }
        public double Lat { get; set; }
    }

    public class Weather // Define a class to represent weather conditions
    {
        public int Id { get; set; }
        public string Main { get; set; }
        public string Description { get; set; }
        public string Icon { get; set; }
    }

    public class Main // Define a class to represent main weather data
    {
        public double Temp { get; set; }
        public double FeelsLike { get; set; }
        public double TempMin { get; set; }
        public double TempMax { get; set; }
        public int Pressure { get; set; }
        public int Humidity { get; set; }
    }

    public class Wind // Define a class to represent wind data
    {
        public double Speed { get; set; }
        public int Deg { get; set; }
        public double Gust { get; set; }
    }

    public class Clouds // Define a class to represent cloud data
    {
        public int All { get; set; }
    }

    public class Sys // Define a class to represent system data
    {
        public int Type { get; set; }
        public int Id { get; set; }
        public string Country { get; set; }
        public int Sunrise { get; set; }
        public int Sunset { get; set; }
    }

    //for saving and retreivng data
    public class PanelState
    {
        public string Id { get; set; }
        public int SizeX { get; set; }
        public int SizeY { get; set; }
        public string CityName { get; set; } // Assuming you store city name
    }


}



<!-- WeatherAPI razor component -->
    @code {
    [Parameter]
    public string? ItemName { get; set; }

    }

<div>
    @ItemName
</div>